<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shaozj&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-20T08:11:26.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhenjiang Shao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vim前端配置</title>
    <link href="http://yoursite.com/2016/08/20/vim%E5%89%8D%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/08/20/vim前端配置/</id>
    <published>2016-08-20T07:37:52.000Z</published>
    <updated>2016-08-20T08:11:26.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;VIM_插件管理器&quot;&gt;VIM 插件管理器&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vundle&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载&lt;br&gt;  &lt;code&gt;$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置插件&lt;br&gt;  在&lt;code&gt;~/.vimrc&lt;/code&gt;文件中添加  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; nocompatible              &lt;span class=&quot;string&quot;&gt;&quot; be iMproved, required
filetype off                  &quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;required&lt;/span&gt;

&lt;span class=&quot;string&quot;&gt;&quot; set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
&quot;&lt;/span&gt; alternatively, pass a &lt;span class=&quot;keyword&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; Vundle should &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; plugins
&lt;span class=&quot;string&quot;&gt;&quot;call vundle#begin(&#39;~/some/path/here&#39;)

&quot;&lt;/span&gt; let Vundle manage Vundle, &lt;span class=&quot;keyword&quot;&gt;required&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;Plugin&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;VundleVim/Vundle.vim&#39;&lt;/span&gt;

&lt;span class=&quot;string&quot;&gt;&quot; The following are examples of different formats supported.
&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Keep&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Plugin&lt;/span&gt; commands &lt;span class=&quot;keyword&quot;&gt;between&lt;/span&gt; vundle#&lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;.
&lt;span class=&quot;string&quot;&gt;&quot; plugin on GitHub repo
Plugin &#39;tpope/vim-fugitive&#39;
&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;http&lt;/span&gt;://vim-scripts.org/vim/scripts.html
&lt;span class=&quot;keyword&quot;&gt;Plugin&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;L9&#39;&lt;/span&gt;
&lt;span class=&quot;string&quot;&gt;&quot; Git plugin not hosted on GitHub
Plugin &#39;git://git.wincent.com/command-t.git&#39;
&quot;&lt;/span&gt; git repos &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; your &lt;span class=&quot;keyword&quot;&gt;local&lt;/span&gt; machine (&lt;span class=&quot;keyword&quot;&gt;i&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;e&lt;/span&gt;. &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt; working &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; your own &lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt;)
&lt;span class=&quot;keyword&quot;&gt;Plugin&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;file:///home/gmarik/path/to/plugin&#39;&lt;/span&gt;
&lt;span class=&quot;string&quot;&gt;&quot; The sparkup vim script is in a subdirectory of this repo called vim.
&quot;&lt;/span&gt; Pass the &lt;span class=&quot;keyword&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; the runtimepath properly.
&lt;span class=&quot;keyword&quot;&gt;Plugin&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;rstacruz/sparkup&#39;&lt;/span&gt;, {&lt;span class=&quot;string&quot;&gt;&#39;rtp&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;vim/&#39;&lt;/span&gt;}
&lt;span class=&quot;string&quot;&gt;&quot; Install L9 and avoid a Naming conflict if you&#39;ve already installed a
&quot;&lt;/span&gt; different &lt;span class=&quot;keyword&quot;&gt;version&lt;/span&gt; somewhere &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;.
&lt;span class=&quot;keyword&quot;&gt;Plugin&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;ascenator/L9&#39;&lt;/span&gt;, {&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;newL9&#39;&lt;/span&gt;}

&lt;span class=&quot;string&quot;&gt;&quot; All of your Plugins must be added before the following line
call vundle#end()            &quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;required&lt;/span&gt;
filetype &lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt; indent &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;    &lt;span class=&quot;string&quot;&gt;&quot; required
&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;To&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ignore&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt; indent changes, instead &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt;:
&lt;span class=&quot;string&quot;&gt;&quot;filetype plugin on
&quot;&lt;/span&gt;
&lt;span class=&quot;string&quot;&gt;&quot; Brief help
&quot;&lt;/span&gt; :PluginList       - lists configured plugins
&lt;span class=&quot;string&quot;&gt;&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
&quot;&lt;/span&gt; :PluginSearch foo - searches &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; foo;&lt;/span&gt; append `!` to refresh local &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;cache&lt;/span&gt;
&lt;span class=&quot;string&quot;&gt;&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
&quot;&lt;/span&gt;
&lt;span class=&quot;string&quot;&gt;&quot; see :h vundle for more details or wiki for FAQ
&quot;&lt;/span&gt; Put your non-&lt;span class=&quot;keyword&quot;&gt;Plugin&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;stuff&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;after&lt;/span&gt; this line  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装插件&lt;br&gt;   打开&lt;code&gt;vim&lt;/code&gt;，运行&lt;code&gt;:PluginInstall&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;vim-jsbeautify&quot;&gt;vim-jsbeautify&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/maksimr/vim-jsbeautify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vim-jsbeautify&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;~/.vimrc&lt;/code&gt;中添加&lt;br&gt;  &lt;code&gt;Plugin &amp;#39;maksimr/vim-jsbeautify&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打开&lt;code&gt;vim&lt;/code&gt;，运行&lt;code&gt;:PluginInstall&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;vim-javascript&quot;&gt;vim-javascript&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/pangloss/vim-javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vim-javascript&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;~/.vimrc&lt;/code&gt;中添加&lt;br&gt;&lt;code&gt;Plugin &amp;#39;pangloss/vim-javascript&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;打开&lt;code&gt;vim&lt;/code&gt;，运行&lt;code&gt;:PluginInstall&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;语法高亮配置&quot;&gt;语法高亮配置&lt;/h3&gt;&lt;p&gt;如果语法高亮没有生效，在&lt;code&gt;.vimrc&lt;/code&gt; 加入以下3句：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;syntax&lt;/span&gt; enable &lt;span class=&quot;string&quot;&gt;&quot; enable syntax hightlight and completion
&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;syntax&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot; syntax highlighing
&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;filetype&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &quot; &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; detect &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; types
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;VIM_插件管理器&quot;&gt;VIM 插件管理器&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vundle&lt;/a&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vim" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/vim/"/>
    
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>XSS 安全防范</title>
    <link href="http://yoursite.com/2016/08/14/xss-%E5%AE%89%E5%85%A8%E9%98%B2%E8%8C%83/"/>
    <id>http://yoursite.com/2016/08/14/xss-安全防范/</id>
    <published>2016-08-14T06:18:15.000Z</published>
    <updated>2016-08-15T06:24:05.000Z</updated>
    
    <content type="html">&lt;p&gt;XSS是跨站脚本攻击，主要特点是开发者之外的人向页面内容注入了脚本执行。&lt;br&gt;XSS攻击有两个要素，一是来自用户或者三方的内容，二是被当做html或者javascript代码执行。&lt;br&gt;在面对XSS攻击时，需要牢记的一句话是：&lt;strong&gt;一切输入和输出都是敌对的！&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;XSS_攻击的输入点&quot;&gt;XSS 攻击的输入点&lt;/h3&gt;&lt;p&gt;开发者之外的人可以通过以下输入点向页面中注入攻击脚本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window.location/document.location/document.referrer&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;来自url的内容，因为链接可能来自外部页面，所以页面url应当视为外部用户内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;后端接口返回数据&lt;ul&gt;
&lt;li&gt;来自服务端的数据，这些数据可能由其它系统提供，其中可能包含用户的直接输入，所以应该把通过后端接口请求得到的数据视为外部用户产生内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.cookie&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cookie&lt;/code&gt;有较多渠道被写入，为安全起见，应当视为用户产生内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;input.value/textarea.value&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;用户产生内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;XSS_攻击的输出点&quot;&gt;XSS 攻击的输出点&lt;/h3&gt;&lt;p&gt;XSS 攻击输出点是开发者在代码中写的语句，这些语句可能会将用户输入的内容作为代码执行，进而发生XSS 攻击。XSS 攻击主要有以下输出点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;document.write/document.writeln：直接向文档流写入html内容，不提倡使用.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果希望用这种方式输出文本，在写入之前，应当使用document.createTextNode+appendChild将之转换成html文本语法。&lt;/li&gt;
&lt;li&gt;如果确有特殊设计，希望用这种方式输出html，在写入之前，应当过滤html语法字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;innerHTML/$el.html()：直接向文档节点内插入html内容，除使用模板外，不提倡使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果希望用这种方式输出文本，应当使用innerText或者document.createTextNode+appendChild代替。&lt;/li&gt;
&lt;li&gt;如果确有特殊设计，希望用这种方式输出html，在写入之前，应当过滤html语法字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;new Function：通过参数字符串创建新函数，除特殊场景外，不提倡使用。如果来自不安全的输入的字符需要拼接成字符串，建议使用JSON.stringify处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;eval：把字符串当做函数执行，除特殊场景外，不提倡使用。如果来自不安全的输入的字符需要拼接成字符串，建议使用JSON.stringify处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;setTimeout/setInterval：时间相关函数，如果第一个参数是字符串，那么效果类似eval，任何场景下，不提倡这样使用，第一个参数应该永远是函数类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;image.src/link.href/a.href：设置url，因为可能是javascript协议，建议使用lib.httpurl解析url的结构和参数，确定域名属于安全域名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;window.location：跳转url，因为uri可能是javascript协议，建议使用lib.httpurl解析url的结构和参数，确定域名属于安全域名。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;XSS_攻击实例&quot;&gt;XSS 攻击实例&lt;/h3&gt;&lt;h4 id=&quot;HTML_攻击&quot;&gt;HTML 攻击&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;输出点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;[代码]&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;现在弹个窗:&lt;/p&gt;
&lt;p&gt; &lt;code&gt;&amp;lt;img src=&amp;quot;x&amp;quot; onerror=&amp;quot;&amp;amp;#97;&amp;amp;#108;&amp;amp;#101;&amp;amp;#114;&amp;amp;#116;&amp;amp;#40;&amp;amp;#49;&amp;amp;#41;&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原code:&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;&amp;lt;img src=&amp;quot;x&amp;quot; onerror=&amp;quot;alert(1)&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;XSS是跨站脚本攻击，主要特点是开发者之外的人向页面内容注入了脚本执行。&lt;br&gt;XSS攻击有两个要素，一是来自用户或者三方的内容，二是被当做html或者javascript代码执行。&lt;br&gt;在面对XSS攻击时，需要牢记的一句话是：&lt;strong&gt;一切输入和输出都是敌对的！&lt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>ES6 模板字符串</title>
    <link href="http://yoursite.com/2016/08/07/ES6-%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2016/08/07/ES6-模板字符串/</id>
    <published>2016-08-07T03:49:14.000Z</published>
    <updated>2016-08-07T13:14:14.000Z</updated>
    
    <content type="html">&lt;p&gt;无论是前端还是后端，都存在着模板引擎。模板引擎有着丰富的表现力，使得我们可以根据不同的数据渲染出不同的页面结构以及内容。在es6中引入了模板字符串，使得我们可以在字符串中嵌入变量、表达式以及可以直接写多行字符串。另外，模板字符串还支持嵌套使用。这些特性，一些模板引擎基本的功能，我们可以用es6模板字符串来实现。&lt;/p&gt;
&lt;h3 id=&quot;for_循环&quot;&gt;for 循环&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一种比较直接的方式是：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; html = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len = blocksData.length; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; curData = blocksData[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; jsonData = JSON.stringify(curData);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    html += `&amp;lt;div &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item-box block4in1 $&amp;#123;setClass(i)&amp;#125;&quot;&lt;/span&gt; data-json=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;eH(jsonData)&amp;#125;&quot;&lt;/span&gt; fe-role=&lt;span class=&quot;string&quot;&gt;&quot;Widget&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;lt;div &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item-content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &amp;lt;img &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;poster&quot;&lt;/span&gt; src=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;eH(baseUrl + curData.recommendImage)&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;lt;div &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item-mask&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &amp;lt;/div&amp;gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; html;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，我们利用一个立即执行函数，在函数内写一个for循环来实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对以上的方法稍加优化，我们可以得到如下的代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  blocksData.reduce((prev, next, i, arr) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; jsonData = JSON.stringify(next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; prev += &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    `&amp;lt;div &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item-box block4in1 $&amp;#123;setClass(i)&amp;#125;&quot;&lt;/span&gt; data-json=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;eH(jsonData)&amp;#125;&quot;&lt;/span&gt; fe-role=&lt;span class=&quot;string&quot;&gt;&quot;Widget&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;div &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item-content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;img &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;poster&quot;&lt;/span&gt; src=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;eH(baseUrl + next.recommendImage)&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item-mask&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们利用了Array的reduce方法，从而不需要将代码封装在一个立即执行函数之中。&lt;/p&gt;
&lt;h3 id=&quot;if_else_条件判断&quot;&gt;if else 条件判断&lt;/h3&gt;&lt;p&gt;很容易想到用三目运算符：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${(data &amp;amp;&amp;amp; data != &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;) ? `&amp;lt;&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;&amp;gt;${data}&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;&amp;gt;` : `&amp;lt;&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;&amp;gt;no contnet&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;&amp;gt;`}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果只在存在数据时有相应的html，不存在数据时没有html，则可以这么写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;${(&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; != &#39;&#39;) &amp;amp;&amp;amp; `&amp;lt;div&amp;gt;$&lt;span class=&quot;container&quot;&gt;{&lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;}&lt;/span&gt;&amp;lt;/div&amp;gt;`}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;特殊字符转义&quot;&gt;特殊字符转义&lt;/h3&gt;&lt;p&gt;在模板中非常重要的一点是字符串的转义，因为涉及到安全的问题，一个简单的方式是利用标签模板：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var message = SaferHTML&lt;span class=&quot;escape&quot;&gt;`&amp;lt;&lt;/span&gt;p&amp;gt;${bonk.sender} has sent you &lt;span class=&quot;literal&quot;&gt;a&lt;/span&gt; bonk.&amp;lt;/p&amp;gt;&lt;span class=&quot;escape&quot;&gt;`;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的代码等价于：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;message&lt;/span&gt; = SaferHTML(templateData, bonk.sender);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，    templateData 是一个不可变的字符串数组，在上例中为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.freeze([&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;p&amp;gt;&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot; has sent you a bonk.&amp;lt;/p&amp;gt;&quot;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SaferHTML需要我们自己去实现：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SaferHTML&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;templateData&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s = templateData[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arg = &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Escape special characters in the substitution.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s += arg.replace(&lt;span class=&quot;regexp&quot;&gt;/&amp;amp;/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;amp;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .replace(&lt;span class=&quot;regexp&quot;&gt;/&amp;lt;/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;lt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .replace(&lt;span class=&quot;regexp&quot;&gt;/&amp;gt;/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Don&#39;t escape special characters in the template.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s += templateData[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从安全角度来看，这个 SaferHTML 非常脆弱。在 HTML 中，不同的地方需要用不同的方式去转义，SaferHTML 并没有做到。&lt;br&gt;另外一点是，这个方法只适用于没有嵌套使用模板字符串的情况，如果嵌套使用，那么一些不该被转义的字符串页会被转义。在这种情况下，我们还是老老实实地对每一处改转义的地方进行转义.&lt;/p&gt;
&lt;p&gt;首先，需要编写一个转义函数：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; reUnescapedHtml = &lt;span class=&quot;regexp&quot;&gt;/[&amp;amp;&amp;lt;&amp;gt;&quot;&#39;`]/g&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 需要被转码的字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; reHasUnescapedHtml = &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(reUnescapedHtml.source); &lt;span class=&quot;comment&quot;&gt;// 测试是否有unescaped字符时不需要 &#39;g&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; htmlEscapes = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;amp;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;lt;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;&amp;gt;&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;gt;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;&quot;&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;quot;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;&#39;&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;#39;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;`&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;#96;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; escapeHtmlChar = basePropertyOf(htmlEscapes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;basePropertyOf&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;object&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; object == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt; : object[key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 转义html字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param string &amp;#123;String&amp;#125; 输入的字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @return &amp;#123;String&amp;#125; 转义后的字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;escapeHTML&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;string&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (string &amp;amp;&amp;amp; reHasUnescapedHtml.test(string))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ? string.replace(reUnescapedHtml, escapeHtmlChar)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    : string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = escapeHTML;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们在每一个需要转义字符串的地方调用 escapeHTML 方法进行转义。&lt;/p&gt;
&lt;h3 id=&quot;参考文献：&quot;&gt;参考文献：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DOM based XSS Prevention Cheat Sheet&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000003874852&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[Web 安全] 了解XSS与防范&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/es-six-deeply/template-strings.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;模版字符串&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://jaysoo.ca/2014/03/20/i18n-with-es6-template-strings/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;i18n with tagged template strings in ECMAScript 6&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;无论是前端还是后端，都存在着模板引擎。模板引擎有着丰富的表现力，使得我们可以根据不同的数据渲染出不同的页面结构以及内容。在es6中引入了模板字符串，使得我们可以在字符串中嵌入变量、表达式以及可以直接写多行字符串。另外，模板字符串还支持嵌套使用。这些特性，一些模板引擎基本的功
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>webpack学习</title>
    <link href="http://yoursite.com/2016/03/23/webpack%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/03/23/webpack学习/</id>
    <published>2016-03-23T02:51:53.000Z</published>
    <updated>2016-03-23T07:12:56.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;功能需求&quot;&gt;功能需求&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;编译&lt;/li&gt;
&lt;li&gt;压缩&lt;/li&gt;
&lt;li&gt;web服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;webpack学习&quot;&gt;webpack学习&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;$ webpack --config XXX&lt;span class=&quot;class&quot;&gt;.js&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;//使用另一份配置文件（比如webpack.config2.js）来打包&lt;/span&gt;

$ webpack --watch   &lt;span class=&quot;comment&quot;&gt;//监听变动并自动打包&lt;/span&gt;

$ webpack -&lt;span class=&quot;tag&quot;&gt;p&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;//压缩混淆脚本，这个非常非常重要！&lt;/span&gt;

$ webpack -d    &lt;span class=&quot;comment&quot;&gt;//生成map映射文件，告知哪些模块被最终打包到哪里了&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;功能需求&quot;&gt;功能需求&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;编译&lt;/li&gt;
&lt;li&gt;压缩&lt;/li&gt;
&lt;li&gt;web服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;webpack学习&quot;&gt;webpack学习&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;$ webpack --config XXX
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>谷歌前端开发指南之优化内容显示效率</title>
    <link href="http://yoursite.com/2016/03/18/%E4%BC%98%E5%8C%96%E6%98%BE%E7%A4%BA%E6%95%88%E7%8E%87/"/>
    <id>http://yoursite.com/2016/03/18/优化显示效率/</id>
    <published>2016-03-18T09:17:45.000Z</published>
    <updated>2016-03-18T09:24:42.000Z</updated>
    
    <content type="html">&lt;p&gt;转载自@笑博，翻译自google大牛&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt; 删除不必要的下载（即减少http访问请求）
&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt; 优化基于文本的资产的编码和传输大小
&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt; 图片优化
&lt;span class=&quot;number&quot;&gt;4.&lt;/span&gt; 网页字体优化
&lt;span class=&quot;number&quot;&gt;5.&lt;/span&gt; HTTP 缓存
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;1-_删除不必要的下载（即减少http访问请求）（最快和最好的优化资源是不需要下载的资源。）&quot;&gt;1. 删除不必要的下载（即减少http访问请求）（最快和最好的优化资源是不需要下载的资源。）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;网页往往会包含一些不必要的资源；或者更糟的是，包含的某些资源会影响网页性能，同时还无法给访问者或所处的网站带来太大价值。&lt;/li&gt;
&lt;li&gt;要实现最佳效果，应针对网页上的每个资源，定期清点和重新评估。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-_优化基于文本的资产的编码和传输大小&quot;&gt;2. 优化基于文本的资产的编码和传输大小&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数据压缩&lt;ul&gt;
&lt;li&gt;将浏览器必须下载的剩余资源的总大小减至最小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;源码压缩：预处理和特定于内容的优化&lt;/li&gt;
&lt;li&gt;使用 GZIP 进行文本压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-_图片优化&quot;&gt;3. 图片优化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;删除和替换图片：&lt;code&gt;要实现所需的效果，是否确实需要图片&lt;/code&gt; —— 能否利用CSS效果等更高效的方式替代&lt;/li&gt;
&lt;li&gt;矢量图与光栅图：&lt;ul&gt;
&lt;li&gt;矢量图（使用线、点和多边形来展示图片）：最适用于由简单的几何形状（例如徽标、文字、图标等）组成的图片，任何分辨率和缩放设置都可以提供清晰的效果，该格式最适用于需要以不同尺寸显示的高分辨率场景和资源。&lt;/li&gt;
&lt;li&gt;光栅图（通过对矩形栅格内每个像素的值进行编码来展示图片）：场景复杂（例如照片等），就应使用光栅图格式 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高分辨率屏幕的含义（高分辨率屏幕需要高分辨率图片）：尽可能选择矢量图，因为矢量图与分辨率无关，始终可以实现清晰的效果，如果需要光栅图，应提供并优化每个图片的多个版本。&lt;/li&gt;
&lt;li&gt;优化矢量图（SVG文件）&lt;ul&gt;
&lt;li&gt;通过运行 svgo 之类的工具缩减 SVG 文件 &lt;/li&gt;
&lt;li&gt;因为 SVG 是基于 XML 的格式，所以，还可以采用 GZIP 压缩来减小传输大小 - 确保将服务器配置为压缩 SVG 资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优化光栅图&lt;ul&gt;
&lt;li&gt;光栅图是一个 2 维’像素’栅格（如：100 x 100 像素的图片是 10000 个像素的序列），每个像素存储’RGBA‘值：(R) 红色通道、(G) 绿色通道、(B) 蓝色通道和 (A) alpha（透明度）通道&lt;/li&gt;
&lt;li&gt;无论将数据从服务器传输到客户端时使用哪种图片格式，在浏览器对图片进行解码时，每个像素始终占用 4 个字节的内存。对于较大的图片以及可用内存不足的设备（例如低端移动设备）来说，这可能是一个重要的约束条件。&lt;/li&gt;
&lt;li&gt;压缩图片，考虑使用webp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;无损图片压缩与有损图片压缩：&lt;ul&gt;
&lt;li&gt;使用’有损‘过滤器处理图片，删除一些像素数据&lt;/li&gt;
&lt;li&gt;使用’无损‘过滤器处理图片，压缩像素数据&lt;/li&gt;
&lt;li&gt;因为对图片进行编码所使用的算法不同，所以，不同图片格式的质量级别无法直接进行比较：质量为 90 的 JPEG 与质量为 90 的 WebP 效果截然不同。实际上，即使相同图片格式的质量级别，根据压缩程序的使用方式不同，视觉效果可能也会不同！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择正确的图片格式：&lt;ul&gt;
&lt;li&gt;普遍支持的三种格式为：GIF、PNG 和 JPEG。除了这些格式之外，某些浏览器还支持 WebP 和 JPEG XR 等较新的格式，可以提供更好的整体压缩以及更多的功能。&lt;/li&gt;
&lt;li&gt;平均来说，与可比的 JPEG 图片相比，WebP 可以使文件大小减少 30%。&lt;/li&gt;
&lt;li&gt;优化工具：&lt;ul&gt;
&lt;li&gt;gifsicle    创建和优化 GIF 图片&lt;/li&gt;
&lt;li&gt;jpegtran    优化 JPEG 图片&lt;/li&gt;
&lt;li&gt;optipng    无损 PNG 优化&lt;/li&gt;
&lt;li&gt;pngquant    有损 PNG 优化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提供缩放的图片资源：尽量提供尺寸合适的图片，减少因图片缩放耗费性能&lt;ul&gt;
&lt;li&gt;尽管您也许无法保证每个资源都以精确的显示尺寸提供，但是，应确保不必要的像素数最少，并确保特别是较大资产以尽可能接近显示尺寸的尺寸提供。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在优化图片时，要记住下列技巧和方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首选矢量格式：矢量图与分辨率和缩放无关，最适用于多设备或高分辨率的情况。&lt;/li&gt;
&lt;li&gt;缩减和压缩 SVG 资源：大多数绘图应用程序生成的 XML 标记通常包含不必要的元数据，可以删除；确保服务器配置为对 SVG 资源采用 GZIP 压缩。&lt;/li&gt;
&lt;li&gt;选择最佳光栅图格式：确定功能要求，然后选择适合每个特定资源的格式。&lt;/li&gt;
&lt;li&gt;体验光栅格式的最优质量设置：随意降低’质量’设置，效果通常非常好，而字节可能会节省很多。&lt;/li&gt;
&lt;li&gt;删除不必要的图片元数据：许多光栅图包含不必要的资源元数据：地理信息、相机信息等。使用适合的工具删除这些数据。&lt;/li&gt;
&lt;li&gt;提供缩放的图片：调整服务器上的图片尺寸，确保’显示’尺寸尽可能接近图片的’自然’尺寸。尤其要密切关注较大的图片，因为这些图片在调整尺寸时，占用了最大的额外开销！&lt;/li&gt;
&lt;li&gt;自动：投资自动化的工具和基础设施，这样，可以确保所有图片资源始终会进行优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;4-_网页字体优化&quot;&gt;4. 网页字体优化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;网页字体解析&lt;ul&gt;
&lt;li&gt;网页字体格式&lt;/li&gt;
&lt;li&gt;通过压缩减小字体大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 @font-face 定义字体系列&lt;ul&gt;
&lt;li&gt;格式选择&lt;/li&gt;
&lt;li&gt;Unicode-range 子集内嵌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优化加载和呈现&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-_HTTP_缓存&quot;&gt;5. HTTP 缓存&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用 ETag 验证缓存的响应&lt;ul&gt;
&lt;li&gt;服务器会生成并返回一个随机令牌，通常是文件内容的哈希值或者某个其他指纹码。客户端不必了解指纹码是如何生成的，只需要在下一个请求中将其发送给服务器：如果指纹码仍然一致，说明资源未被修改，我们就可以跳过下载。&lt;/li&gt;
&lt;li&gt;实际上，我们唯一要做的就是确保服务器提供必要的 ETag 令牌：查看服务器文档中是否有必要的配置标志。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cache-Control&lt;/li&gt;
&lt;li&gt;废弃和更新已缓存的响应&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在定义缓存策略时，要记住下列技巧和方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用一致的网址：如果您在不同的网址上提供相同的内容，将会多次获取和存储该内容。提示：注意，网址区分大小写！&lt;/li&gt;
&lt;li&gt;确保服务器提供验证令牌 (ETag)：通过验证令牌，如果服务器上的资源未被更改，就不必传输相同的字节。&lt;/li&gt;
&lt;li&gt;确定中继缓存可以缓存哪些资源：对所有用户的响应完全相同的资源很适合由 CDN 或其他中继缓存进行缓存。&lt;/li&gt;
&lt;li&gt;确定每个资源的最优缓存周期：不同的资源可能有不同的更新要求。审查并确定每个资源适合的 max-age。&lt;/li&gt;
&lt;li&gt;确定网站的最佳缓存层级：对 HTML 文档组合使用包含内容指纹码的资源网址以及短时间或 no-cache 的生命周期，可以控制客户端获取更新的速度。&lt;/li&gt;
&lt;li&gt;搅动最小化：有些资源的更新比其他资源频繁。如果资源的特定部分（例如 JavaScript 函数或一组 CSS 样式）会经常更新，应考虑将其代码作为单独的文件提供。这样，每次获取更新时，剩余内容（例如不会频繁更新的库代码）可以从缓存中获取，确保下载的内容量最少。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;转载自@笑博，翻译自google大牛&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt; 删除不必要的下载（即减少http访问请求）
&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt; 优化基于文本的资产的编码和传输大小
&lt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端 性能" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF-%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Charles抓包实战</title>
    <link href="http://yoursite.com/2016/03/17/Charles%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2016/03/17/Charles抓包实战/</id>
    <published>2016-03-17T06:01:06.000Z</published>
    <updated>2016-03-18T09:25:03.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;下载&quot;&gt;下载&lt;/h3&gt;&lt;p&gt;官网下载地址：&lt;a href=&quot;http://www.charlesproxy.com/latest-release/download.do&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.charlesproxy.com/latest-release/download.do&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载后直接安装即可&lt;/p&gt;
&lt;h3 id=&quot;抓包&quot;&gt;抓包&lt;/h3&gt;&lt;h4 id=&quot;一、http抓包&quot;&gt;一、http抓包&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;1、打开Charles程序&lt;/li&gt;
&lt;li&gt;2、查看Mac电脑的IP地址，系统偏好设置-&amp;gt;网络就可以查看到了，比如我的ip地址是：30.11.160.175&lt;/li&gt;
&lt;li&gt;3、打开iOS设置，进入当前wifi连接(Mac在一个局域网内)，设置HTTP代理Group，将服务器填为上一步中获得的IP，即30.11.160.175，端口填8888：&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下载&quot;&gt;下载&lt;/h3&gt;&lt;p&gt;官网下载地址：&lt;a href=&quot;http://www.charlesproxy.com/latest-release/download.do&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.char
    
    </summary>
    
      <category term="调试" scheme="http://yoursite.com/categories/%E8%B0%83%E8%AF%95/"/>
    
    
      <category term="调试" scheme="http://yoursite.com/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>30+有用css代码片段</title>
    <link href="http://yoursite.com/2016/03/15/30pluscss/"/>
    <id>http://yoursite.com/2016/03/15/30pluscss/</id>
    <published>2016-03-15T15:37:29.000Z</published>
    <updated>2016-08-20T07:41:06.000Z</updated>
    
    <content type="html">&lt;p&gt;原文：&lt;a href=&quot;http://webres.wang/31-css-code-snippets-to-make-you-a-better-coder/?utm_source=tuicool&amp;amp;utm_medium=referral&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://webres.wang/31-css-code-snippets-to-make-you-a-better-coder/?utm_source=tuicool&amp;amp;utm_medium=referral&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;1、垂直对齐&quot;&gt;1、垂直对齐&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;class&quot;&gt;.vc&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; relative&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-webkit-transform&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;translateY&lt;/span&gt;(-&lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-o-transform&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;translateY&lt;/span&gt;(-&lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;transform&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;translateY&lt;/span&gt;(-&lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2、只在一侧或两侧具有投影&quot;&gt;2、只在一侧或两侧具有投影&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;class&quot;&gt;.box-shadow&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#AC92EC&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;160px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;90px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-top&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;45px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;80px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; absolute&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
}&lt;/span&gt;

&lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;.box-shadow&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;after {
    content: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;150px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-top&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;88px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;75px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; block&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; absolute&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;z-index&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-webkit-box-shadow&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;hexcolor&quot;&gt;#000000&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
       &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-moz-box-shadow&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;hexcolor&quot;&gt;#000000&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
            &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;box-shadow&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;hexcolor&quot;&gt;#000000&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;3、渐变背景动画效果&quot;&gt;3、渐变背景动画效果&lt;/h4&gt;&lt;p&gt;。。。未完待续&lt;/p&gt;
&lt;p&gt;。。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://webres.wang/31-css-code-snippets-to-make-you-a-better-coder/?utm_source=tuicool&amp;amp;utm_medium=referral&quot; target=&quot;_blan
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>absolute定位下的margin居中失效</title>
    <link href="http://yoursite.com/2016/03/14/absolute-margin/"/>
    <id>http://yoursite.com/2016/03/14/absolute-margin/</id>
    <published>2016-03-14T15:25:34.000Z</published>
    <updated>2016-03-18T09:41:16.000Z</updated>
    
    <content type="html">&lt;p&gt;在绝对定位时，css样式中设置margin：0 auto；失效问题，例子如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;class&quot;&gt;.middle-div&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; absolute&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; auto&lt;/span&gt;&lt;/span&gt;;
}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如上的方式并不能实现元素的水平居中。而采用相对定位则可以：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;class&quot;&gt;.middle-div&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; relative&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; auto&lt;/span&gt;&lt;/span&gt;;
}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然而，absolute定位下，margin是可以工作的，例如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;class&quot;&gt;.middle-div&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; absolute&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样元素的确能相对父元素向右移动父元素宽度的50％。&lt;/p&gt;
&lt;p&gt;一般对于absolute定位的元素，我们居中的方式为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;class&quot;&gt;.middle-div&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; absolute&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; -&lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还有有趣的一点是，如下代码，也能实现absolute定位元素的水平居中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;class&quot;&gt;.middle-div&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;positon&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; absolute&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;right&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; auto&lt;/span&gt;&lt;/span&gt;;
}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这其中的原理，上网搜索了很多内容，但都没有讲清楚，后续将继续研究，今天暂且做个记录。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/petehunt/react-howto/blob/master/README-zh.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何学习react&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/36516604&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react 有哪些最佳实践?&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在绝对定位时，css样式中设置margin：0 auto；失效问题，例子如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;class&quot;&gt;.middle-div&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
    &lt;span class=&quot;rule
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>表单（Form）小结</title>
    <link href="http://yoursite.com/2016/01/04/form/"/>
    <id>http://yoursite.com/2016/01/04/form/</id>
    <published>2016-01-04T02:42:44.000Z</published>
    <updated>2016-03-14T15:47:51.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;&lt;p&gt;这段时间做了个后台的前端项目。说实话，之前并没有做过后台的项目。在做了后台项目后，发现最重要的是要熟练掌握表单相关的技术。这篇文章将我所做的后台项目中用到的表单相关的知识做一个总结，也算是一种积累吧。:)&lt;/p&gt;
&lt;h3&gt;一个简单的表单示例&lt;/h3&gt;

&lt;p&gt;下面是一个简单的表单示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;form&lt;/span&gt; id=&lt;span class=&quot;string&quot;&gt;&quot;main-form&quot;&lt;/span&gt; action=&lt;span class=&quot;string&quot;&gt;&quot;http://somesite.com/prog/adduser&quot;&lt;/span&gt; method=&lt;span class=&quot;string&quot;&gt;&quot;post&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class=&quot;keyword&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;姓名: &amp;lt;/&lt;span class=&quot;keyword&quot;&gt;label&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class=&quot;keyword&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; name=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; id=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;br&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class=&quot;keyword&quot;&gt;label&lt;/span&gt;&amp;gt;
        性别：
        &amp;lt;&lt;span class=&quot;keyword&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;radio&quot;&lt;/span&gt; name=&lt;span class=&quot;string&quot;&gt;&quot;sex&quot;&lt;/span&gt; value=&lt;span class=&quot;string&quot;&gt;&quot;Male&quot;&lt;/span&gt;&amp;gt;男
        &amp;lt;&lt;span class=&quot;keyword&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;radio&quot;&lt;/span&gt; name=&lt;span class=&quot;string&quot;&gt;&quot;sex&quot;&lt;/span&gt; value=&lt;span class=&quot;string&quot;&gt;&quot;Female&quot;&lt;/span&gt;&amp;gt;女&amp;lt;&lt;span class=&quot;keyword&quot;&gt;br&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class=&quot;keyword&quot;&gt;label&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class=&quot;keyword&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt; value=&lt;span class=&quot;string&quot;&gt;&quot;Send&quot;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span class=&quot;keyword&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;reset&quot;&lt;/span&gt;&amp;gt;
 &amp;lt;/&lt;span class=&quot;keyword&quot;&gt;form&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;页面如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.alicdn.com/tps/TB1h_YhLXXXXXb3aXXXXXXXXXXX-239-81.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当我们点击send按钮时，就能向服务器端发送表单。点击重置按钮时，input中的value值将会是我们设置的默认值。&lt;br&gt;form的action属性值为服务端处理我们提交的表单的URI。&lt;br&gt;method是表单提交的方式。&lt;/p&gt;
&lt;p&gt;input标签是表单中的控件，用户在input中输入的值，或者用户选择了某个radio选项的值就是这个控件的value值。当提交表单时，input中的name和value值编码后传给服务器端，服务器端解码后根据name和value键值对获取用户提交的信息。&lt;/p&gt;
&lt;h2 id=&quot;表单提交的过程&quot;&gt;表单提交的过程&lt;/h2&gt;&lt;h3&gt;成功控件&lt;/h3&gt;

&lt;p&gt;成功控件是能被提交给服务端的控件，每个成功控件都有其name已经value值，以被作为form数据的一部分传给服务器端。一个成功控件必须在form标签之中，并且有name值。&lt;/p&gt;
&lt;p&gt;此外，成功控件还需满足以下条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控件不能设置为disabled。&lt;/li&gt;
&lt;li&gt;如果form包含多个提交按钮，只有被点击的提交按钮才是成功控件。&lt;/li&gt;
&lt;li&gt;被选中的checkbox才算成功控件。&lt;/li&gt;
&lt;li&gt;被选中的radio才算成功控件。&lt;/li&gt;
&lt;li&gt;select选项，被选中的option才是成功控件，如果没有option被选中，那么这个select不是成功控件，将不被提交。&lt;/li&gt;
&lt;li&gt;包含了文件的file控件才是成功控件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：如果控件的display属性被设置为none，控件仍然可以是成功的。&lt;/p&gt;
&lt;h3&gt;提交表单&lt;/h3&gt;

&lt;p&gt;表单提交可以分为以下几步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、验证成功的控件，如上文所诉。&lt;/li&gt;
&lt;li&gt;2、创建表单数据集，由成功控件的name和value组成的键值对序列。&lt;/li&gt;
&lt;li&gt;3、编码表单数据集，编码方式由form元素的enctype属性来指定。&lt;/li&gt;
&lt;li&gt;4、提交编码后的表单数据集。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;对多个提交按钮，做不同提交任务的处理&quot;&gt;对多个提交按钮，做不同提交任务的处理&lt;/h2&gt;&lt;p&gt;我们经常会碰到这样的需求，一个页面中有多个不同的按钮，点击按钮时服务端做不同的处理。此时我们改如何处理呢？&lt;br&gt;一种方式是可以给提交按钮设置不同的name，服务端通过判断name来判断用户点击了哪个按钮，然后做相应的处理。另一种方式是给提交按钮设置相同的name，不同的value，服务端通过判断value值来判断用户点击了哪个按钮。&lt;/p&gt;
&lt;p&gt;以上两种方式将判断的工作交给了服务端。对于前端，我们可以用ajax的方式提交表单来实现多个提交按钮的处理。用ajax提交的另一个好处是可以防止页面刷新或者跳转到action指定的页面。&lt;/p&gt;
&lt;p&gt;如果用jQuery，我们可以这么提交：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;#main-form&quot;&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;{
    e.preventDefault();
    $.post(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.action, $(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;).serialize());
}); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用jQuery，如果想上传部分表单，我们可以这么提交&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&lt;span class=&quot;string&quot;&gt;&quot;divCustomerInfo&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;p&amp;gt;名称: &amp;lt;input &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; name=&lt;span class=&quot;string&quot;&gt;&quot;CustomerName&quot;&lt;/span&gt; /&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;电话: &amp;lt;input &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; name=&lt;span class=&quot;string&quot;&gt;&quot;CustomerTel&quot;&lt;/span&gt; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

$(&lt;span class=&quot;string&quot;&gt;&quot;#btnId&quot;&lt;/span&gt;).click(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
    $.ajax({
        url: &lt;span class=&quot;string&quot;&gt;&quot;test.htm&quot;&lt;/span&gt;, 
        &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;POST&quot;&lt;/span&gt;,
        data: $(&lt;span class=&quot;string&quot;&gt;&#39;#divCustomerInfo :text&#39;&lt;/span&gt;).fieldSerialize(),
        success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(responseText)&lt;/span&gt;&lt;/span&gt;{
            alert(responseText);
        }
    });
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;利用H5的FormData对象，我们可以这么提交：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;main-form&quot;&lt;/span&gt;).onsubmit = function(e) {

    e.preventDefault();

    var f = e.target,
        formData = new FormData(f),
        xhr = new XMLHttpRequest();

    xhr.open(&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;keyword&quot;&gt;POST&lt;/span&gt;&quot;&lt;/span&gt;, f.action);
    xhr.send(formData);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于jQuery，还有一个强大的插件jquery.form.js，利用这个插件，我们可以这么提交：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $(&lt;span class=&quot;string&quot;&gt;&#39;.send-message&#39;&lt;/span&gt;).click(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)&lt;/span&gt;{
    e.preventDefault();
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(self.validateForm(VALIDATE_TYPE.TEST_MESSAGE)){
        $(&lt;span class=&quot;string&quot;&gt;&#39;#main-form&#39;&lt;/span&gt;).ajaxSubmit({
            url: &lt;span class=&quot;string&quot;&gt;&#39;/message/send_test_message.htm&#39;&lt;/span&gt;,
            success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt;)&lt;/span&gt;{
                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; res === &lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;)
                    res = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(res);
                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(res);
                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(res.result === &lt;span class=&quot;string&quot;&gt;&#39;success&#39;&lt;/span&gt;){
                    $(&lt;span class=&quot;string&quot;&gt;&#39;.test-success&#39;&lt;/span&gt;).removeClass(&lt;span class=&quot;string&quot;&gt;&#39;hide&#39;&lt;/span&gt;);
                }
                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{
                    alert(res.errorMsg);
                    $(&lt;span class=&quot;string&quot;&gt;&#39;.test-success&#39;&lt;/span&gt;).addClass(&lt;span class=&quot;string&quot;&gt;&#39;hide&#39;&lt;/span&gt;);
                }
            },
            error: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;xhr, type&lt;/span&gt;)&lt;/span&gt;{
                $(&lt;span class=&quot;string&quot;&gt;&#39;.test-success&#39;&lt;/span&gt;).addClass(&lt;span class=&quot;string&quot;&gt;&#39;hide&#39;&lt;/span&gt;);
                alert(&lt;span class=&quot;string&quot;&gt;&#39;提交测试失败，请重试！&#39;&lt;/span&gt;);
                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Ajax error! &#39;&lt;/span&gt; + type);
            }
        });
    }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{
        $(&lt;span class=&quot;string&quot;&gt;&#39;.test-success&#39;&lt;/span&gt;).addClass(&lt;span class=&quot;string&quot;&gt;&#39;hide&#39;&lt;/span&gt;);
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;利用ajaxSubmit，我们可以设置提交的url，以及成功和失败的回调函数，在处理业务时的确方便很多。而且不用手动序列化提交的表单数据。&lt;br&gt;ajaxSubmit还有一个强大的地方是能够处理文件的提交。&lt;/p&gt;
&lt;h2 id=&quot;表单文件上传&quot;&gt;表单文件上传&lt;/h2&gt;&lt;p&gt;下面是一个表单文件上传的例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&lt;span class=&quot;string&quot;&gt;&quot;/message/upload_image.htm&quot;&lt;/span&gt; method=&lt;span class=&quot;string&quot;&gt;&quot;post&quot;&lt;/span&gt; enctype=&lt;span class=&quot;string&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;postimg-form&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;div &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;form-group&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;input name=&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt; id=&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;send-file&quot;&lt;/span&gt;  style=&lt;span class=&quot;string&quot;&gt;&quot;display: inline-block;&quot;&lt;/span&gt;/&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;urlinput-wrap&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;span&amp;gt;图片&lt;span class=&quot;type&quot;&gt;URL&lt;/span&gt;：&amp;lt;/span&amp;gt;
        &amp;lt;input name=&lt;span class=&quot;string&quot;&gt;&quot;picurlList&quot;&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; value=&lt;span class=&quot;string&quot;&gt;&quot;$!{picurlList}&quot;&lt;/span&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;img-url not-hidden&quot;&lt;/span&gt;&amp;gt;&amp;lt;/input&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;button &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt;&amp;gt;取消&amp;lt;/button&amp;gt;
    &amp;lt;input &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;=&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;commit-changepic&quot;&lt;/span&gt;&amp;gt;确定&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于文件上传，必须采用post方式，并且form元素的enctype需要设置为multipart/form-data。&lt;/p&gt;
&lt;p&gt;表单的enctype一般常用的有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;application/x-www-form-urlencoded:&lt;/p&gt;
&lt;p&gt;  这是默认的编码方式。它只处理表单域里的value属性值，采用这种变法方式的表单会将表单域的值处理成URL方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;multipart/form-data: &lt;/p&gt;
&lt;p&gt; 这种编码方式会以二进制流的方式来处理表单数据，这中编码方式会把文件域指定的文件内容也封装到请求参数里。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用form的submit提交文件，会导致刷新页面，或者无法在提交成功后在回调函数中处理相应的业务。&lt;/p&gt;
&lt;p&gt;而一般的ajax无法满足文件的上传(HTML5提出了XMLHttpRequest对象的第二版，从此ajax能够上传文件了。)。所幸的是，ajaxSubmit可以支持文件的提交。&lt;/p&gt;
&lt;p&gt;示例代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;.commit-changepic&#39;&lt;/span&gt;).click(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)&lt;/span&gt;{
    e.preventDefault();
    $(&lt;span class=&quot;string&quot;&gt;&#39;.postimg-form&#39;&lt;/span&gt;).ajaxSubmit({
        success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt;)&lt;/span&gt;{
            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(res);
            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(res.fileUrl);
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(res.fileUrl){
                $(&lt;span class=&quot;string&quot;&gt;&#39;.poster-img&#39;&lt;/span&gt;).attr(&lt;span class=&quot;string&quot;&gt;&#39;src&#39;&lt;/span&gt;,res.fileUrl);
                $($(&lt;span class=&quot;string&quot;&gt;&#39;.img-url&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]).val(res.fileUrl);
            }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{
                alert(&lt;span class=&quot;string&quot;&gt;&#39;图片上传失败！&#39;&lt;/span&gt;);
            }
        },
        error: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt;)&lt;/span&gt;{
            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(res);
            alert(&lt;span class=&quot;string&quot;&gt;&#39;图片上传失败！&#39;&lt;/span&gt;);
        }
    });
   });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用H5的FormData上传文件，示例如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.FormData) {　
　　　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; formData = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FormData();
　　　　&lt;span class=&quot;comment&quot;&gt;// 建立一个upload表单项，值为上传的文件&lt;/span&gt;
　　　　formData.append(&lt;span class=&quot;string&quot;&gt;&#39;upload&#39;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;upload&#39;&lt;/span&gt;).files[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);
　　　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();
　　　　xhr.open(&lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;, $(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;).attr(&lt;span class=&quot;string&quot;&gt;&#39;action&#39;&lt;/span&gt;));
　　　　xhr.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
　　　　　　&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (xhr.status === &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;) {
　　　　　　　　&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;上传成功&#39;&lt;/span&gt;);
　　　　　　} &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
　　　　　　　　&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;出错了&#39;&lt;/span&gt;);
　　　　　　}
　　　　};
　　　　xhr.send(formData);
　　}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ajaxSubmit上传文件的原理还不清楚（猜测可能使用iframe实现的），有空可以研究一下。。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;&lt;p&gt;这段时间做了个后台的前端项目。说实话，之前并没有做过后台的项目。在做了后台项目后，发现最重要的是要熟练掌握表单相关的技术。这篇文章将我所做的后台项目中用到的表单相关的知识做一个总结，也算是一种积累吧。:)&lt;/p&gt;
&lt;h3&gt;一个简单的表单
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="form" scheme="http://yoursite.com/tags/form/"/>
    
  </entry>
  
  <entry>
    <title>hexo 使用小记</title>
    <link href="http://yoursite.com/2015/09/11/my-new-post/"/>
    <id>http://yoursite.com/2015/09/11/my-new-post/</id>
    <published>2015-09-11T00:56:29.000Z</published>
    <updated>2016-03-07T09:54:46.000Z</updated>
    
    <content type="html">&lt;ul&gt;
&lt;li&gt;用markdown写文章，使用方法参照博客&lt;a href=&quot;http://zipperary.com/2013/05/22/introduction-to-markdown/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;hexo的使用&quot;&gt;hexo的使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;发表新文章   &lt;code&gt;hexo new &amp;quot;my new post&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在H:\hexo\source_posts中编辑&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;title: my &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; post &lt;span class=&quot;preprocessor&quot;&gt;#可以改成中文的，如&lt;span class=&quot;string&quot;&gt;&quot;新文章&quot;&lt;/span&gt;&lt;/span&gt;

date: &lt;span class=&quot;number&quot;&gt;2015&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;09&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;08&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;56&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;preprocessor&quot;&gt;#发表日期，一般不改动&lt;/span&gt;

categories: blog &lt;span class=&quot;preprocessor&quot;&gt;#文章文类&lt;/span&gt;

tags: [博客，文章] &lt;span class=&quot;preprocessor&quot;&gt;#文章标签，多于一项时用这种格式&lt;/span&gt;

这里是正文，用markdown写
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hexo server&lt;/code&gt;，访问localhost:4000预览效果。（退出server用Ctrl+c）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexo deploy --generate&lt;/code&gt;，同步到github。访问网站看看效果。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;用markdown写文章，使用方法参照博客&lt;a href=&quot;http://zipperary.com/2013/05/22/introduction-to-markdown/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introductio
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="webFront" scheme="http://yoursite.com/tags/webFront/"/>
    
  </entry>
  
</feed>
